/*   -*- buffer-read-only: t -*- vi: set ro:
 *
 *  DO NOT EDIT THIS FILE   (cli-args.c)
 *
 *  It has been AutoGen-ed
 *  From the definitions    cli-args.def
 *  and the template file   options
 *
 * Generated from AutoOpts 41:0:16 templates.
 *
 *  AutoOpts is a copyrighted work.  This source file is not encumbered
 *  by AutoOpts licensing, but is provided under the licensing terms chosen
 *  by the gnutls-cli author or copyright holder.  AutoOpts is
 *  licensed under the terms of the LGPL.  The redistributable library
 *  (``libopts'') is licensed under the terms of either the LGPL or, at the
 *  users discretion, the BSD license.  See the AutoOpts and/or libopts sources
 *  for details.
 *
 * The gnutls-cli program is copyrighted and licensed
 * under the following terms:
 *
 *  Copyright (C) 2000-2014 Free Software Foundation, and others, all rights reserved.
 *  This is free software. It is licensed for use, modification and
 *  redistribution under the terms of the GNU General Public License,
 *  version 3 or later <http://gnu.org/licenses/gpl.html>
 *
 *  gnutls-cli is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  gnutls-cli is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __doxygen__
#define OPTION_CODE_COMPILE 1
#include "cli-args.h"
#include <sys/types.h>

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>

#ifdef  __cplusplus
extern "C" {
#endif
extern FILE * option_usage_fp;
#define zCopyright      (gnutls_cli_opt_strs+0)
#define zLicenseDescrip (gnutls_cli_opt_strs+285)


#ifndef NULL
#  define NULL 0
#endif

/**
 *  static const strings for gnutls-cli options
 */
static char const gnutls_cli_opt_strs[4284] =
/*     0 */ "gnutls-cli 3.3.9\n"
            "Copyright (C) 2000-2014 Free Software Foundation, and others, all rights reserved.\n"
            "This is free software. It is licensed for use, modification and\n"
            "redistribution under the terms of the GNU General Public License,\n"
            "version 3 or later <http://gnu.org/licenses/gpl.html>\n\0"
/*   285 */ "gnutls-cli is free software: you can redistribute it and/or modify it under\n"
            "the terms of the GNU General Public License as published by the Free\n"
            "Software Foundation, either version 3 of the License, or (at your option)\n"
            "any later version.\n\n"
            "gnutls-cli is distributed in the hope that it will be useful, but WITHOUT\n"
            "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n"
            "FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n"
            "more details.\n\n"
            "You should have received a copy of the GNU General Public License along\n"
            "with this program.  If not, see <http://www.gnu.org/licenses/>.\n\0"
/*   894 */ "Enable debugging\0"
/*   911 */ "DEBUG\0"
/*   917 */ "debug\0"
/*   923 */ "More verbose output\0"
/*   943 */ "VERBOSE\0"
/*   951 */ "verbose\0"
/*   959 */ "Enable trust on first use authentication\0"
/*  1000 */ "TOFU\0"
/*  1005 */ "no-tofu\0"
/*  1013 */ "no\0"
/*  1016 */ "Fail to connect if a known certificate has changed\0"
/*  1067 */ "STRICT_TOFU\0"
/*  1079 */ "no-strict-tofu\0"
/*  1094 */ "Enable DANE certificate verification (DNSSEC)\0"
/*  1140 */ "DANE\0"
/*  1145 */ "no-dane\0"
/*  1153 */ "Use the local DNS server for DNSSEC resolving\0"
/*  1199 */ "LOCAL_DNS\0"
/*  1209 */ "no-local-dns\0"
/*  1222 */ "Disable CA certificate verification\0"
/*  1258 */ "CA_VERIFICATION\0"
/*  1274 */ "no-ca-verification\0"
/*  1293 */ "Enable OCSP certificate verification\0"
/*  1330 */ "OCSP\0"
/*  1335 */ "no-ocsp\0"
/*  1343 */ "Establish a session and resume\0"
/*  1374 */ "RESUME\0"
/*  1381 */ "resume\0"
/*  1388 */ "Establish a session and rehandshake\0"
/*  1424 */ "REHANDSHAKE\0"
/*  1436 */ "rehandshake\0"
/*  1448 */ "Connect, establish a plain session and start TLS\0"
/*  1497 */ "STARTTLS\0"
/*  1506 */ "starttls\0"
/*  1515 */ "Use DTLS (datagram TLS) over UDP\0"
/*  1548 */ "UDP\0"
/*  1552 */ "udp\0"
/*  1556 */ "Set MTU for datagram TLS\0"
/*  1581 */ "MTU\0"
/*  1585 */ "mtu\0"
/*  1589 */ "Send CR LF instead of LF\0"
/*  1614 */ "CRLF\0"
/*  1619 */ "crlf\0"
/*  1624 */ "Use DER format for certificates to read from\0"
/*  1669 */ "X509FMTDER\0"
/*  1680 */ "x509fmtder\0"
/*  1691 */ "Send the openpgp fingerprint, instead of the key\0"
/*  1740 */ "FINGERPRINT\0"
/*  1752 */ "fingerprint\0"
/*  1764 */ "Print peer's certificate in PEM format\0"
/*  1803 */ "PRINT_CERT\0"
/*  1814 */ "print-cert\0"
/*  1825 */ "The minimum number of bits allowed for DH\0"
/*  1867 */ "DH_BITS\0"
/*  1875 */ "dh-bits\0"
/*  1883 */ "Priorities string\0"
/*  1901 */ "PRIORITY\0"
/*  1910 */ "priority\0"
/*  1919 */ "Certificate file or PKCS #11 URL to use\0"
/*  1959 */ "X509CAFILE\0"
/*  1970 */ "x509cafile\0"
/*  1981 */ "CRL file to use\0"
/*  1997 */ "X509CRLFILE\0"
/*  2009 */ "x509crlfile\0"
/*  2021 */ "PGP Key file to use\0"
/*  2041 */ "PGPKEYFILE\0"
/*  2052 */ "pgpkeyfile\0"
/*  2063 */ "PGP Key ring file to use\0"
/*  2088 */ "PGPKEYRING\0"
/*  2099 */ "pgpkeyring\0"
/*  2110 */ "PGP Public Key (certificate) file to use\0"
/*  2151 */ "PGPCERTFILE\0"
/*  2163 */ "pgpcertfile\0"
/*  2175 */ "X.509 key file or PKCS #11 URL to use\0"
/*  2213 */ "X509KEYFILE\0"
/*  2225 */ "x509keyfile\0"
/*  2237 */ "X.509 Certificate file or PKCS #11 URL to use\0"
/*  2283 */ "X509CERTFILE\0"
/*  2296 */ "x509certfile\0"
/*  2309 */ "PGP subkey to use (hex or auto)\0"
/*  2341 */ "PGPSUBKEY\0"
/*  2351 */ "pgpsubkey\0"
/*  2361 */ "SRP username to use\0"
/*  2381 */ "SRPUSERNAME\0"
/*  2393 */ "srpusername\0"
/*  2405 */ "SRP password to use\0"
/*  2425 */ "SRPPASSWD\0"
/*  2435 */ "srppasswd\0"
/*  2445 */ "PSK username to use\0"
/*  2465 */ "PSKUSERNAME\0"
/*  2477 */ "pskusername\0"
/*  2489 */ "PSK key (in hex) to use\0"
/*  2513 */ "PSKKEY\0"
/*  2520 */ "pskkey\0"
/*  2527 */ "The port or service to connect to\0"
/*  2561 */ "PORT\0"
/*  2566 */ "port\0"
/*  2571 */ "Don't abort program if server certificate can't be validated\0"
/*  2632 */ "INSECURE\0"
/*  2641 */ "insecure\0"
/*  2650 */ "Use length-hiding padding to prevent traffic analysis\0"
/*  2704 */ "RANGES\0"
/*  2711 */ "ranges\0"
/*  2718 */ "Benchmark individual ciphers\0"
/*  2747 */ "BENCHMARK_CIPHERS\0"
/*  2765 */ "benchmark-ciphers\0"
/*  2783 */ "Benchmark TLS key exchange methods\0"
/*  2818 */ "BENCHMARK_TLS_KX\0"
/*  2835 */ "benchmark-tls-kx\0"
/*  2852 */ "Benchmark TLS ciphers\0"
/*  2874 */ "BENCHMARK_TLS_CIPHERS\0"
/*  2896 */ "benchmark-tls-ciphers\0"
/*  2918 */ "Print a list of the supported algorithms and modes\0"
/*  2969 */ "LIST\0"
/*  2974 */ "list\0"
/*  2979 */ "Don't allow session tickets\0"
/*  3007 */ "NOTICKET\0"
/*  3016 */ "noticket\0"
/*  3025 */ "Offer SRTP profiles\0"
/*  3045 */ "SRTP_PROFILES\0"
/*  3059 */ "srtp-profiles\0"
/*  3073 */ "Application layer protocol\0"
/*  3100 */ "ALPN\0"
/*  3105 */ "alpn\0"
/*  3110 */ "Activate heartbeat support\0"
/*  3137 */ "HEARTBEAT\0"
/*  3147 */ "heartbeat\0"
/*  3157 */ "The maximum record size to advertize\0"
/*  3194 */ "RECORDSIZE\0"
/*  3205 */ "recordsize\0"
/*  3216 */ "Do not send a Server Name Indication (SNI)\0"
/*  3259 */ "DISABLE_SNI\0"
/*  3271 */ "disable-sni\0"
/*  3283 */ "Disable all the TLS extensions\0"
/*  3314 */ "DISABLE_EXTENSIONS\0"
/*  3333 */ "disable-extensions\0"
/*  3352 */ "Inline commands of the form ^<cmd>^\0"
/*  3388 */ "INLINE_COMMANDS\0"
/*  3404 */ "inline-commands\0"
/*  3420 */ "Change the default (^) used as a delimiter for inline commands.  The\n"
            "value is a single US-ASCII character (octets 0 - 127).\0"
/*  3544 */ "INLINE_COMMANDS_PREFIX\0"
/*  3567 */ "inline-commands-prefix\0"
/*  3590 */ "Specify the PKCS #11 provider library\0"
/*  3628 */ "PROVIDER\0"
/*  3637 */ "provider\0"
/*  3646 */ "Reports the status of the FIPS140-2 mode in gnutls library\0"
/*  3705 */ "FIPS140_MODE\0"
/*  3718 */ "fips140-mode\0"
/*  3731 */ "display extended usage information and exit\0"
/*  3775 */ "help\0"
/*  3780 */ "extended usage information passed thru pager\0"
/*  3825 */ "more-help\0"
/*  3835 */ "output version information and exit\0"
/*  3871 */ "version\0"
/*  3879 */ "GNUTLS_CLI\0"
/*  3890 */ "gnutls-cli - GnuTLS client\n"
            "Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [hostname]\n\0"
/*  3986 */ "bugs@gnutls.org\0"
/*  4002 */ "\n\0"
/*  4004 */ "Simple client program to set up a TLS connection to some other computer.  It\n"
            "sets up a TLS connection and forwards data from the standard input to the\n"
            "secured socket and vice versa.\n\0"
/*  4187 */ "gnutls-cli 3.3.9\0"
/*  4204 */ "Usage: gnutls-cli [options] hostname\n"
            "gnutls-cli --help for usage instructions.\n";

/**
 *  debug option description:
 */
/** Descriptive text for the debug option */
#define DEBUG_DESC      (gnutls_cli_opt_strs+894)
/** Upper-cased name for the debug option */
#define DEBUG_NAME      (gnutls_cli_opt_strs+911)
/** Name string for the debug option */
#define DEBUG_name      (gnutls_cli_opt_strs+917)
/** Compiled in flag settings for the debug option */
#define DEBUG_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  verbose option description:
 */
/** Descriptive text for the verbose option */
#define VERBOSE_DESC      (gnutls_cli_opt_strs+923)
/** Upper-cased name for the verbose option */
#define VERBOSE_NAME      (gnutls_cli_opt_strs+943)
/** Name string for the verbose option */
#define VERBOSE_name      (gnutls_cli_opt_strs+951)
/** Compiled in flag settings for the verbose option */
#define VERBOSE_FLAGS     (OPTST_DISABLED)

/**
 *  tofu option description:
 */
/** Descriptive text for the tofu option */
#define TOFU_DESC      (gnutls_cli_opt_strs+959)
/** Upper-cased name for the tofu option */
#define TOFU_NAME      (gnutls_cli_opt_strs+1000)
/** disablement name for the tofu option */
#define NOT_TOFU_name  (gnutls_cli_opt_strs+1005)
/** disablement prefix for the tofu option */
#define NOT_TOFU_PFX   (gnutls_cli_opt_strs+1013)
/** Name string for the tofu option */
#define TOFU_name      (NOT_TOFU_name + 3)
/** Compiled in flag settings for the tofu option */
#define TOFU_FLAGS     (OPTST_DISABLED)

/**
 *  strict-tofu option description:
 */
/** Descriptive text for the strict-tofu option */
#define STRICT_TOFU_DESC      (gnutls_cli_opt_strs+1016)
/** Upper-cased name for the strict-tofu option */
#define STRICT_TOFU_NAME      (gnutls_cli_opt_strs+1067)
/** disablement name for the strict-tofu option */
#define NOT_STRICT_TOFU_name  (gnutls_cli_opt_strs+1079)
/** disablement prefix for the strict-tofu option */
#define NOT_STRICT_TOFU_PFX   (gnutls_cli_opt_strs+1013)
/** Name string for the strict-tofu option */
#define STRICT_TOFU_name      (NOT_STRICT_TOFU_name + 3)
/** Compiled in flag settings for the strict-tofu option */
#define STRICT_TOFU_FLAGS     (OPTST_DISABLED)

/**
 *  dane option description:
 */
/** Descriptive text for the dane option */
#define DANE_DESC      (gnutls_cli_opt_strs+1094)
/** Upper-cased name for the dane option */
#define DANE_NAME      (gnutls_cli_opt_strs+1140)
/** disablement name for the dane option */
#define NOT_DANE_name  (gnutls_cli_opt_strs+1145)
/** disablement prefix for the dane option */
#define NOT_DANE_PFX   (gnutls_cli_opt_strs+1013)
/** Name string for the dane option */
#define DANE_name      (NOT_DANE_name + 3)
/** Compiled in flag settings for the dane option */
#define DANE_FLAGS     (OPTST_DISABLED)

/**
 *  local-dns option description:
 */
/** Descriptive text for the local-dns option */
#define LOCAL_DNS_DESC      (gnutls_cli_opt_strs+1153)
/** Upper-cased name for the local-dns option */
#define LOCAL_DNS_NAME      (gnutls_cli_opt_strs+1199)
/** disablement name for the local-dns option */
#define NOT_LOCAL_DNS_name  (gnutls_cli_opt_strs+1209)
/** disablement prefix for the local-dns option */
#define NOT_LOCAL_DNS_PFX   (gnutls_cli_opt_strs+1013)
/** Name string for the local-dns option */
#define LOCAL_DNS_name      (NOT_LOCAL_DNS_name + 3)
/** Compiled in flag settings for the local-dns option */
#define LOCAL_DNS_FLAGS     (OPTST_DISABLED)

/**
 *  ca-verification option description:
 */
/** Descriptive text for the ca-verification option */
#define CA_VERIFICATION_DESC      (gnutls_cli_opt_strs+1222)
/** Upper-cased name for the ca-verification option */
#define CA_VERIFICATION_NAME      (gnutls_cli_opt_strs+1258)
/** disablement name for the ca-verification option */
#define NOT_CA_VERIFICATION_name  (gnutls_cli_opt_strs+1274)
/** disablement prefix for the ca-verification option */
#define NOT_CA_VERIFICATION_PFX   (gnutls_cli_opt_strs+1013)
/** Name string for the ca-verification option */
#define CA_VERIFICATION_name      (NOT_CA_VERIFICATION_name + 3)
/** Compiled in flag settings for the ca-verification option */
#define CA_VERIFICATION_FLAGS     (OPTST_INITENABLED)

/**
 *  ocsp option description:
 */
/** Descriptive text for the ocsp option */
#define OCSP_DESC      (gnutls_cli_opt_strs+1293)
/** Upper-cased name for the ocsp option */
#define OCSP_NAME      (gnutls_cli_opt_strs+1330)
/** disablement name for the ocsp option */
#define NOT_OCSP_name  (gnutls_cli_opt_strs+1335)
/** disablement prefix for the ocsp option */
#define NOT_OCSP_PFX   (gnutls_cli_opt_strs+1013)
/** Name string for the ocsp option */
#define OCSP_name      (NOT_OCSP_name + 3)
/** Compiled in flag settings for the ocsp option */
#define OCSP_FLAGS     (OPTST_DISABLED)

/**
 *  resume option description:
 */
/** Descriptive text for the resume option */
#define RESUME_DESC      (gnutls_cli_opt_strs+1343)
/** Upper-cased name for the resume option */
#define RESUME_NAME      (gnutls_cli_opt_strs+1374)
/** Name string for the resume option */
#define RESUME_name      (gnutls_cli_opt_strs+1381)
/** Compiled in flag settings for the resume option */
#define RESUME_FLAGS     (OPTST_DISABLED)

/**
 *  rehandshake option description:
 */
/** Descriptive text for the rehandshake option */
#define REHANDSHAKE_DESC      (gnutls_cli_opt_strs+1388)
/** Upper-cased name for the rehandshake option */
#define REHANDSHAKE_NAME      (gnutls_cli_opt_strs+1424)
/** Name string for the rehandshake option */
#define REHANDSHAKE_name      (gnutls_cli_opt_strs+1436)
/** Compiled in flag settings for the rehandshake option */
#define REHANDSHAKE_FLAGS     (OPTST_DISABLED)

/**
 *  starttls option description:
 */
/** Descriptive text for the starttls option */
#define STARTTLS_DESC      (gnutls_cli_opt_strs+1448)
/** Upper-cased name for the starttls option */
#define STARTTLS_NAME      (gnutls_cli_opt_strs+1497)
/** Name string for the starttls option */
#define STARTTLS_name      (gnutls_cli_opt_strs+1506)
/** Compiled in flag settings for the starttls option */
#define STARTTLS_FLAGS     (OPTST_DISABLED)

/**
 *  udp option description:
 */
/** Descriptive text for the udp option */
#define UDP_DESC      (gnutls_cli_opt_strs+1515)
/** Upper-cased name for the udp option */
#define UDP_NAME      (gnutls_cli_opt_strs+1548)
/** Name string for the udp option */
#define UDP_name      (gnutls_cli_opt_strs+1552)
/** Compiled in flag settings for the udp option */
#define UDP_FLAGS     (OPTST_DISABLED)

/**
 *  mtu option description:
 */
/** Descriptive text for the mtu option */
#define MTU_DESC      (gnutls_cli_opt_strs+1556)
/** Upper-cased name for the mtu option */
#define MTU_NAME      (gnutls_cli_opt_strs+1581)
/** Name string for the mtu option */
#define MTU_name      (gnutls_cli_opt_strs+1585)
/** Compiled in flag settings for the mtu option */
#define MTU_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  crlf option description:
 */
/** Descriptive text for the crlf option */
#define CRLF_DESC      (gnutls_cli_opt_strs+1589)
/** Upper-cased name for the crlf option */
#define CRLF_NAME      (gnutls_cli_opt_strs+1614)
/** Name string for the crlf option */
#define CRLF_name      (gnutls_cli_opt_strs+1619)
/** Compiled in flag settings for the crlf option */
#define CRLF_FLAGS     (OPTST_DISABLED)

/**
 *  x509fmtder option description:
 */
/** Descriptive text for the x509fmtder option */
#define X509FMTDER_DESC      (gnutls_cli_opt_strs+1624)
/** Upper-cased name for the x509fmtder option */
#define X509FMTDER_NAME      (gnutls_cli_opt_strs+1669)
/** Name string for the x509fmtder option */
#define X509FMTDER_name      (gnutls_cli_opt_strs+1680)
/** Compiled in flag settings for the x509fmtder option */
#define X509FMTDER_FLAGS     (OPTST_DISABLED)

/**
 *  fingerprint option description:
 */
/** Descriptive text for the fingerprint option */
#define FINGERPRINT_DESC      (gnutls_cli_opt_strs+1691)
/** Upper-cased name for the fingerprint option */
#define FINGERPRINT_NAME      (gnutls_cli_opt_strs+1740)
/** Name string for the fingerprint option */
#define FINGERPRINT_name      (gnutls_cli_opt_strs+1752)
/** Compiled in flag settings for the fingerprint option */
#define FINGERPRINT_FLAGS     (OPTST_DISABLED)

/**
 *  print-cert option description:
 */
/** Descriptive text for the print-cert option */
#define PRINT_CERT_DESC      (gnutls_cli_opt_strs+1764)
/** Upper-cased name for the print-cert option */
#define PRINT_CERT_NAME      (gnutls_cli_opt_strs+1803)
/** Name string for the print-cert option */
#define PRINT_CERT_name      (gnutls_cli_opt_strs+1814)
/** Compiled in flag settings for the print-cert option */
#define PRINT_CERT_FLAGS     (OPTST_DISABLED)

/**
 *  dh-bits option description:
 */
/** Descriptive text for the dh-bits option */
#define DH_BITS_DESC      (gnutls_cli_opt_strs+1825)
/** Upper-cased name for the dh-bits option */
#define DH_BITS_NAME      (gnutls_cli_opt_strs+1867)
/** Name string for the dh-bits option */
#define DH_BITS_name      (gnutls_cli_opt_strs+1875)
/** Compiled in flag settings for the dh-bits option */
#define DH_BITS_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  priority option description:
 */
/** Descriptive text for the priority option */
#define PRIORITY_DESC      (gnutls_cli_opt_strs+1883)
/** Upper-cased name for the priority option */
#define PRIORITY_NAME      (gnutls_cli_opt_strs+1901)
/** Name string for the priority option */
#define PRIORITY_name      (gnutls_cli_opt_strs+1910)
/** Compiled in flag settings for the priority option */
#define PRIORITY_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509cafile option description:
 */
/** Descriptive text for the x509cafile option */
#define X509CAFILE_DESC      (gnutls_cli_opt_strs+1919)
/** Upper-cased name for the x509cafile option */
#define X509CAFILE_NAME      (gnutls_cli_opt_strs+1959)
/** Name string for the x509cafile option */
#define X509CAFILE_name      (gnutls_cli_opt_strs+1970)
/** Compiled in flag settings for the x509cafile option */
#define X509CAFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509crlfile option description:
 */
/** Descriptive text for the x509crlfile option */
#define X509CRLFILE_DESC      (gnutls_cli_opt_strs+1981)
/** Upper-cased name for the x509crlfile option */
#define X509CRLFILE_NAME      (gnutls_cli_opt_strs+1997)
/** Name string for the x509crlfile option */
#define X509CRLFILE_name      (gnutls_cli_opt_strs+2009)
/** Compiled in flag settings for the x509crlfile option */
#define X509CRLFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pgpkeyfile option description:
 */
/** Descriptive text for the pgpkeyfile option */
#define PGPKEYFILE_DESC      (gnutls_cli_opt_strs+2021)
/** Upper-cased name for the pgpkeyfile option */
#define PGPKEYFILE_NAME      (gnutls_cli_opt_strs+2041)
/** Name string for the pgpkeyfile option */
#define PGPKEYFILE_name      (gnutls_cli_opt_strs+2052)
/** Compiled in flag settings for the pgpkeyfile option */
#define PGPKEYFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pgpkeyring option description:
 */
/** Descriptive text for the pgpkeyring option */
#define PGPKEYRING_DESC      (gnutls_cli_opt_strs+2063)
/** Upper-cased name for the pgpkeyring option */
#define PGPKEYRING_NAME      (gnutls_cli_opt_strs+2088)
/** Name string for the pgpkeyring option */
#define PGPKEYRING_name      (gnutls_cli_opt_strs+2099)
/** Compiled in flag settings for the pgpkeyring option */
#define PGPKEYRING_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  pgpcertfile option description:
 */
/** Descriptive text for the pgpcertfile option */
#define PGPCERTFILE_DESC      (gnutls_cli_opt_strs+2110)
/** Upper-cased name for the pgpcertfile option */
#define PGPCERTFILE_NAME      (gnutls_cli_opt_strs+2151)
/** Name string for the pgpcertfile option */
#define PGPCERTFILE_name      (gnutls_cli_opt_strs+2163)
/** Compiled in flag settings for the pgpcertfile option */
#define PGPCERTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  x509keyfile option description:
 */
/** Descriptive text for the x509keyfile option */
#define X509KEYFILE_DESC      (gnutls_cli_opt_strs+2175)
/** Upper-cased name for the x509keyfile option */
#define X509KEYFILE_NAME      (gnutls_cli_opt_strs+2213)
/** Name string for the x509keyfile option */
#define X509KEYFILE_name      (gnutls_cli_opt_strs+2225)
/** Compiled in flag settings for the x509keyfile option */
#define X509KEYFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  x509certfile option description:
 */
/** Descriptive text for the x509certfile option */
#define X509CERTFILE_DESC      (gnutls_cli_opt_strs+2237)
/** Upper-cased name for the x509certfile option */
#define X509CERTFILE_NAME      (gnutls_cli_opt_strs+2283)
/** Name string for the x509certfile option */
#define X509CERTFILE_name      (gnutls_cli_opt_strs+2296)
/** Compiled in flag settings for the x509certfile option */
#define X509CERTFILE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  pgpsubkey option description:
 */
/** Descriptive text for the pgpsubkey option */
#define PGPSUBKEY_DESC      (gnutls_cli_opt_strs+2309)
/** Upper-cased name for the pgpsubkey option */
#define PGPSUBKEY_NAME      (gnutls_cli_opt_strs+2341)
/** Name string for the pgpsubkey option */
#define PGPSUBKEY_name      (gnutls_cli_opt_strs+2351)
/** Compiled in flag settings for the pgpsubkey option */
#define PGPSUBKEY_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  srpusername option description:
 */
/** Descriptive text for the srpusername option */
#define SRPUSERNAME_DESC      (gnutls_cli_opt_strs+2361)
/** Upper-cased name for the srpusername option */
#define SRPUSERNAME_NAME      (gnutls_cli_opt_strs+2381)
/** Name string for the srpusername option */
#define SRPUSERNAME_name      (gnutls_cli_opt_strs+2393)
/** Compiled in flag settings for the srpusername option */
#define SRPUSERNAME_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  srppasswd option description:
 */
/** Descriptive text for the srppasswd option */
#define SRPPASSWD_DESC      (gnutls_cli_opt_strs+2405)
/** Upper-cased name for the srppasswd option */
#define SRPPASSWD_NAME      (gnutls_cli_opt_strs+2425)
/** Name string for the srppasswd option */
#define SRPPASSWD_name      (gnutls_cli_opt_strs+2435)
/** Compiled in flag settings for the srppasswd option */
#define SRPPASSWD_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  pskusername option description:
 */
/** Descriptive text for the pskusername option */
#define PSKUSERNAME_DESC      (gnutls_cli_opt_strs+2445)
/** Upper-cased name for the pskusername option */
#define PSKUSERNAME_NAME      (gnutls_cli_opt_strs+2465)
/** Name string for the pskusername option */
#define PSKUSERNAME_name      (gnutls_cli_opt_strs+2477)
/** Compiled in flag settings for the pskusername option */
#define PSKUSERNAME_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  pskkey option description:
 */
/** Descriptive text for the pskkey option */
#define PSKKEY_DESC      (gnutls_cli_opt_strs+2489)
/** Upper-cased name for the pskkey option */
#define PSKKEY_NAME      (gnutls_cli_opt_strs+2513)
/** Name string for the pskkey option */
#define PSKKEY_name      (gnutls_cli_opt_strs+2520)
/** Compiled in flag settings for the pskkey option */
#define PSKKEY_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  port option description:
 */
/** Descriptive text for the port option */
#define PORT_DESC      (gnutls_cli_opt_strs+2527)
/** Upper-cased name for the port option */
#define PORT_NAME      (gnutls_cli_opt_strs+2561)
/** Name string for the port option */
#define PORT_name      (gnutls_cli_opt_strs+2566)
/** Compiled in flag settings for the port option */
#define PORT_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  insecure option description:
 */
/** Descriptive text for the insecure option */
#define INSECURE_DESC      (gnutls_cli_opt_strs+2571)
/** Upper-cased name for the insecure option */
#define INSECURE_NAME      (gnutls_cli_opt_strs+2632)
/** Name string for the insecure option */
#define INSECURE_name      (gnutls_cli_opt_strs+2641)
/** Compiled in flag settings for the insecure option */
#define INSECURE_FLAGS     (OPTST_DISABLED)

/**
 *  ranges option description:
 */
/** Descriptive text for the ranges option */
#define RANGES_DESC      (gnutls_cli_opt_strs+2650)
/** Upper-cased name for the ranges option */
#define RANGES_NAME      (gnutls_cli_opt_strs+2704)
/** Name string for the ranges option */
#define RANGES_name      (gnutls_cli_opt_strs+2711)
/** Compiled in flag settings for the ranges option */
#define RANGES_FLAGS     (OPTST_DISABLED)

/**
 *  benchmark-ciphers option description:
 */
/** Descriptive text for the benchmark-ciphers option */
#define BENCHMARK_CIPHERS_DESC      (gnutls_cli_opt_strs+2718)
/** Upper-cased name for the benchmark-ciphers option */
#define BENCHMARK_CIPHERS_NAME      (gnutls_cli_opt_strs+2747)
/** Name string for the benchmark-ciphers option */
#define BENCHMARK_CIPHERS_name      (gnutls_cli_opt_strs+2765)
/** Compiled in flag settings for the benchmark-ciphers option */
#define BENCHMARK_CIPHERS_FLAGS     (OPTST_DISABLED)

/**
 *  benchmark-tls-kx option description:
 */
/** Descriptive text for the benchmark-tls-kx option */
#define BENCHMARK_TLS_KX_DESC      (gnutls_cli_opt_strs+2783)
/** Upper-cased name for the benchmark-tls-kx option */
#define BENCHMARK_TLS_KX_NAME      (gnutls_cli_opt_strs+2818)
/** Name string for the benchmark-tls-kx option */
#define BENCHMARK_TLS_KX_name      (gnutls_cli_opt_strs+2835)
/** Compiled in flag settings for the benchmark-tls-kx option */
#define BENCHMARK_TLS_KX_FLAGS     (OPTST_DISABLED)

/**
 *  benchmark-tls-ciphers option description:
 */
/** Descriptive text for the benchmark-tls-ciphers option */
#define BENCHMARK_TLS_CIPHERS_DESC      (gnutls_cli_opt_strs+2852)
/** Upper-cased name for the benchmark-tls-ciphers option */
#define BENCHMARK_TLS_CIPHERS_NAME      (gnutls_cli_opt_strs+2874)
/** Name string for the benchmark-tls-ciphers option */
#define BENCHMARK_TLS_CIPHERS_name      (gnutls_cli_opt_strs+2896)
/** Compiled in flag settings for the benchmark-tls-ciphers option */
#define BENCHMARK_TLS_CIPHERS_FLAGS     (OPTST_DISABLED)

/**
 *  list option description:
 */
/** Descriptive text for the list option */
#define LIST_DESC      (gnutls_cli_opt_strs+2918)
/** Upper-cased name for the list option */
#define LIST_NAME      (gnutls_cli_opt_strs+2969)
/** Name string for the list option */
#define LIST_name      (gnutls_cli_opt_strs+2974)
/** Compiled in flag settings for the list option */
#define LIST_FLAGS     (OPTST_DISABLED)

/**
 *  noticket option description:
 */
/** Descriptive text for the noticket option */
#define NOTICKET_DESC      (gnutls_cli_opt_strs+2979)
/** Upper-cased name for the noticket option */
#define NOTICKET_NAME      (gnutls_cli_opt_strs+3007)
/** Name string for the noticket option */
#define NOTICKET_name      (gnutls_cli_opt_strs+3016)
/** Compiled in flag settings for the noticket option */
#define NOTICKET_FLAGS     (OPTST_DISABLED)

/**
 *  srtp_profiles option description:
 */
/** Descriptive text for the srtp_profiles option */
#define SRTP_PROFILES_DESC      (gnutls_cli_opt_strs+3025)
/** Upper-cased name for the srtp_profiles option */
#define SRTP_PROFILES_NAME      (gnutls_cli_opt_strs+3045)
/** Name string for the srtp_profiles option */
#define SRTP_PROFILES_name      (gnutls_cli_opt_strs+3059)
/** Compiled in flag settings for the srtp_profiles option */
#define SRTP_PROFILES_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  alpn option description:
 */
/** Descriptive text for the alpn option */
#define ALPN_DESC      (gnutls_cli_opt_strs+3073)
/** Upper-cased name for the alpn option */
#define ALPN_NAME      (gnutls_cli_opt_strs+3100)
/** Name string for the alpn option */
#define ALPN_name      (gnutls_cli_opt_strs+3105)
/** Compiled in flag settings for the alpn option */
#define ALPN_FLAGS     (OPTST_DISABLED | OPTST_STACKED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  heartbeat option description:
 */
/** Descriptive text for the heartbeat option */
#define HEARTBEAT_DESC      (gnutls_cli_opt_strs+3110)
/** Upper-cased name for the heartbeat option */
#define HEARTBEAT_NAME      (gnutls_cli_opt_strs+3137)
/** Name string for the heartbeat option */
#define HEARTBEAT_name      (gnutls_cli_opt_strs+3147)
/** Compiled in flag settings for the heartbeat option */
#define HEARTBEAT_FLAGS     (OPTST_DISABLED)

/**
 *  recordsize option description:
 */
/** Descriptive text for the recordsize option */
#define RECORDSIZE_DESC      (gnutls_cli_opt_strs+3157)
/** Upper-cased name for the recordsize option */
#define RECORDSIZE_NAME      (gnutls_cli_opt_strs+3194)
/** Name string for the recordsize option */
#define RECORDSIZE_name      (gnutls_cli_opt_strs+3205)
/** Compiled in flag settings for the recordsize option */
#define RECORDSIZE_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_NUMERIC))

/**
 *  disable-sni option description:
 */
/** Descriptive text for the disable-sni option */
#define DISABLE_SNI_DESC      (gnutls_cli_opt_strs+3216)
/** Upper-cased name for the disable-sni option */
#define DISABLE_SNI_NAME      (gnutls_cli_opt_strs+3259)
/** Name string for the disable-sni option */
#define DISABLE_SNI_name      (gnutls_cli_opt_strs+3271)
/** Compiled in flag settings for the disable-sni option */
#define DISABLE_SNI_FLAGS     (OPTST_DISABLED)

/**
 *  disable-extensions option description:
 */
/** Descriptive text for the disable-extensions option */
#define DISABLE_EXTENSIONS_DESC      (gnutls_cli_opt_strs+3283)
/** Upper-cased name for the disable-extensions option */
#define DISABLE_EXTENSIONS_NAME      (gnutls_cli_opt_strs+3314)
/** Name string for the disable-extensions option */
#define DISABLE_EXTENSIONS_name      (gnutls_cli_opt_strs+3333)
/** Compiled in flag settings for the disable-extensions option */
#define DISABLE_EXTENSIONS_FLAGS     (OPTST_DISABLED)

/**
 *  inline-commands option description:
 */
/** Descriptive text for the inline-commands option */
#define INLINE_COMMANDS_DESC      (gnutls_cli_opt_strs+3352)
/** Upper-cased name for the inline-commands option */
#define INLINE_COMMANDS_NAME      (gnutls_cli_opt_strs+3388)
/** Name string for the inline-commands option */
#define INLINE_COMMANDS_name      (gnutls_cli_opt_strs+3404)
/** Compiled in flag settings for the inline-commands option */
#define INLINE_COMMANDS_FLAGS     (OPTST_DISABLED)

/**
 *  inline-commands-prefix option description:
 */
/** Descriptive text for the inline-commands-prefix option */
#define INLINE_COMMANDS_PREFIX_DESC      (gnutls_cli_opt_strs+3420)
/** Upper-cased name for the inline-commands-prefix option */
#define INLINE_COMMANDS_PREFIX_NAME      (gnutls_cli_opt_strs+3544)
/** Name string for the inline-commands-prefix option */
#define INLINE_COMMANDS_PREFIX_name      (gnutls_cli_opt_strs+3567)
/** Compiled in flag settings for the inline-commands-prefix option */
#define INLINE_COMMANDS_PREFIX_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_STRING))

/**
 *  provider option description:
 */
/** Descriptive text for the provider option */
#define PROVIDER_DESC      (gnutls_cli_opt_strs+3590)
/** Upper-cased name for the provider option */
#define PROVIDER_NAME      (gnutls_cli_opt_strs+3628)
/** Name string for the provider option */
#define PROVIDER_name      (gnutls_cli_opt_strs+3637)
/** Compiled in flag settings for the provider option */
#define PROVIDER_FLAGS     (OPTST_DISABLED \
        | OPTST_SET_ARGTYPE(OPARG_TYPE_FILE))

/**
 *  fips140-mode option description:
 */
/** Descriptive text for the fips140-mode option */
#define FIPS140_MODE_DESC      (gnutls_cli_opt_strs+3646)
/** Upper-cased name for the fips140-mode option */
#define FIPS140_MODE_NAME      (gnutls_cli_opt_strs+3705)
/** Name string for the fips140-mode option */
#define FIPS140_MODE_name      (gnutls_cli_opt_strs+3718)
/** Compiled in flag settings for the fips140-mode option */
#define FIPS140_MODE_FLAGS     (OPTST_DISABLED)

/*
 *  Help/More_Help/Version option descriptions:
 */
#define HELP_DESC       (gnutls_cli_opt_strs+3731)
#define HELP_name       (gnutls_cli_opt_strs+3775)
#ifdef HAVE_WORKING_FORK
#define MORE_HELP_DESC  (gnutls_cli_opt_strs+3780)
#define MORE_HELP_name  (gnutls_cli_opt_strs+3825)
#define MORE_HELP_FLAGS (OPTST_IMM | OPTST_NO_INIT)
#else
#define MORE_HELP_DESC  HELP_DESC
#define MORE_HELP_name  HELP_name
#define MORE_HELP_FLAGS (OPTST_OMITTED | OPTST_NO_INIT)
#endif
#ifdef NO_OPTIONAL_OPT_ARGS
#  define VER_FLAGS     (OPTST_IMM | OPTST_NO_INIT)
#else
#  define VER_FLAGS     (OPTST_SET_ARGTYPE(OPARG_TYPE_STRING) | \
                         OPTST_ARG_OPTIONAL | OPTST_IMM | OPTST_NO_INIT)
#endif
#define VER_DESC        (gnutls_cli_opt_strs+3835)
#define VER_name        (gnutls_cli_opt_strs+3871)
/**
 *  Declare option callback procedures
 */
extern tOptProc
    optionBooleanVal,   optionNestedVal,    optionNumericVal,
    optionPagedUsage,   optionPrintVersion, optionResetOpt,
    optionStackArg,     optionTimeDate,     optionTimeVal,
    optionUnstackArg,   optionVendorOption;
static tOptProc
    doOptDebug,       doOptMtu,         doOptPgpcertfile, doOptPgpkeyfile,
    doOptPgpkeyring,  doOptProvider,    doOptRecordsize,  doOptX509crlfile,
    doUsageOpt;
#define VER_PROC        optionPrintVersion

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 *  Define the gnutls-cli Option Descriptions.
 * This is an array of OPTION_CT entries, one for each
 * option that the gnutls-cli program responds to.
 */
static tOptDesc optDesc[OPTION_CT] = {
  {  /* entry idx, value */ 0, VALUE_OPT_DEBUG,
     /* equiv idx, value */ 0, VALUE_OPT_DEBUG,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DEBUG_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --debug */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptDebug,
     /* desc, NAME, name */ DEBUG_DESC, DEBUG_NAME, DEBUG_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 1, VALUE_OPT_VERBOSE,
     /* equiv idx, value */ 1, VALUE_OPT_VERBOSE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, NOLIMIT, 0,
     /* opt state flags  */ VERBOSE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --verbose */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ VERBOSE_DESC, VERBOSE_NAME, VERBOSE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 2, VALUE_OPT_TOFU,
     /* equiv idx, value */ 2, VALUE_OPT_TOFU,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ TOFU_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --tofu */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ TOFU_DESC, TOFU_NAME, TOFU_name,
     /* disablement strs */ NOT_TOFU_name, NOT_TOFU_PFX },

  {  /* entry idx, value */ 3, VALUE_OPT_STRICT_TOFU,
     /* equiv idx, value */ 3, VALUE_OPT_STRICT_TOFU,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ STRICT_TOFU_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --strict-tofu */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ STRICT_TOFU_DESC, STRICT_TOFU_NAME, STRICT_TOFU_name,
     /* disablement strs */ NOT_STRICT_TOFU_name, NOT_STRICT_TOFU_PFX },

  {  /* entry idx, value */ 4, VALUE_OPT_DANE,
     /* equiv idx, value */ 4, VALUE_OPT_DANE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DANE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --dane */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ DANE_DESC, DANE_NAME, DANE_name,
     /* disablement strs */ NOT_DANE_name, NOT_DANE_PFX },

  {  /* entry idx, value */ 5, VALUE_OPT_LOCAL_DNS,
     /* equiv idx, value */ 5, VALUE_OPT_LOCAL_DNS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ LOCAL_DNS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --local-dns */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ LOCAL_DNS_DESC, LOCAL_DNS_NAME, LOCAL_DNS_name,
     /* disablement strs */ NOT_LOCAL_DNS_name, NOT_LOCAL_DNS_PFX },

  {  /* entry idx, value */ 6, VALUE_OPT_CA_VERIFICATION,
     /* equiv idx, value */ 6, VALUE_OPT_CA_VERIFICATION,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ CA_VERIFICATION_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --ca-verification */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ CA_VERIFICATION_DESC, CA_VERIFICATION_NAME, CA_VERIFICATION_name,
     /* disablement strs */ NOT_CA_VERIFICATION_name, NOT_CA_VERIFICATION_PFX },

  {  /* entry idx, value */ 7, VALUE_OPT_OCSP,
     /* equiv idx, value */ 7, VALUE_OPT_OCSP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OCSP_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --ocsp */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ OCSP_DESC, OCSP_NAME, OCSP_name,
     /* disablement strs */ NOT_OCSP_name, NOT_OCSP_PFX },

  {  /* entry idx, value */ 8, VALUE_OPT_RESUME,
     /* equiv idx, value */ 8, VALUE_OPT_RESUME,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ RESUME_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --resume */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ RESUME_DESC, RESUME_NAME, RESUME_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 9, VALUE_OPT_REHANDSHAKE,
     /* equiv idx, value */ 9, VALUE_OPT_REHANDSHAKE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ REHANDSHAKE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --rehandshake */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ REHANDSHAKE_DESC, REHANDSHAKE_NAME, REHANDSHAKE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 10, VALUE_OPT_STARTTLS,
     /* equiv idx, value */ 10, VALUE_OPT_STARTTLS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ STARTTLS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --starttls */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ STARTTLS_DESC, STARTTLS_NAME, STARTTLS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 11, VALUE_OPT_UDP,
     /* equiv idx, value */ 11, VALUE_OPT_UDP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ UDP_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --udp */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ UDP_DESC, UDP_NAME, UDP_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 12, VALUE_OPT_MTU,
     /* equiv idx, value */ 12, VALUE_OPT_MTU,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ MTU_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --mtu */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptMtu,
     /* desc, NAME, name */ MTU_DESC, MTU_NAME, MTU_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 13, VALUE_OPT_CRLF,
     /* equiv idx, value */ 13, VALUE_OPT_CRLF,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ CRLF_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --crlf */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ CRLF_DESC, CRLF_NAME, CRLF_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 14, VALUE_OPT_X509FMTDER,
     /* equiv idx, value */ 14, VALUE_OPT_X509FMTDER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509FMTDER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509fmtder */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509FMTDER_DESC, X509FMTDER_NAME, X509FMTDER_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 15, VALUE_OPT_FINGERPRINT,
     /* equiv idx, value */ 15, VALUE_OPT_FINGERPRINT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ FINGERPRINT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --fingerprint */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ FINGERPRINT_DESC, FINGERPRINT_NAME, FINGERPRINT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 16, VALUE_OPT_PRINT_CERT,
     /* equiv idx, value */ 16, VALUE_OPT_PRINT_CERT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PRINT_CERT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --print-cert */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PRINT_CERT_DESC, PRINT_CERT_NAME, PRINT_CERT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 17, VALUE_OPT_DH_BITS,
     /* equiv idx, value */ 17, VALUE_OPT_DH_BITS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DH_BITS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --dh-bits */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ optionNumericVal,
     /* desc, NAME, name */ DH_BITS_DESC, DH_BITS_NAME, DH_BITS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 18, VALUE_OPT_PRIORITY,
     /* equiv idx, value */ 18, VALUE_OPT_PRIORITY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PRIORITY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --priority */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PRIORITY_DESC, PRIORITY_NAME, PRIORITY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 19, VALUE_OPT_X509CAFILE,
     /* equiv idx, value */ 19, VALUE_OPT_X509CAFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509CAFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509cafile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509CAFILE_DESC, X509CAFILE_NAME, X509CAFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 20, VALUE_OPT_X509CRLFILE,
     /* equiv idx, value */ 20, VALUE_OPT_X509CRLFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509CRLFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509crlfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptX509crlfile,
     /* desc, NAME, name */ X509CRLFILE_DESC, X509CRLFILE_NAME, X509CRLFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 21, VALUE_OPT_PGPKEYFILE,
     /* equiv idx, value */ 21, VALUE_OPT_PGPKEYFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPKEYFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpkeyfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPgpkeyfile,
     /* desc, NAME, name */ PGPKEYFILE_DESC, PGPKEYFILE_NAME, PGPKEYFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 22, VALUE_OPT_PGPKEYRING,
     /* equiv idx, value */ 22, VALUE_OPT_PGPKEYRING,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPKEYRING_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpkeyring */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPgpkeyring,
     /* desc, NAME, name */ PGPKEYRING_DESC, PGPKEYRING_NAME, PGPKEYRING_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 23, VALUE_OPT_PGPCERTFILE,
     /* equiv idx, value */ 23, VALUE_OPT_PGPCERTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPCERTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpcertfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptPgpcertfile,
     /* desc, NAME, name */ PGPCERTFILE_DESC, PGPCERTFILE_NAME, PGPCERTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 24, VALUE_OPT_X509KEYFILE,
     /* equiv idx, value */ 24, VALUE_OPT_X509KEYFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509KEYFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509keyfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509KEYFILE_DESC, X509KEYFILE_NAME, X509KEYFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 25, VALUE_OPT_X509CERTFILE,
     /* equiv idx, value */ 25, VALUE_OPT_X509CERTFILE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ X509CERTFILE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --x509certfile */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ X509CERTFILE_DESC, X509CERTFILE_NAME, X509CERTFILE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 26, VALUE_OPT_PGPSUBKEY,
     /* equiv idx, value */ 26, VALUE_OPT_PGPSUBKEY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PGPSUBKEY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pgpsubkey */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PGPSUBKEY_DESC, PGPSUBKEY_NAME, PGPSUBKEY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 27, VALUE_OPT_SRPUSERNAME,
     /* equiv idx, value */ 27, VALUE_OPT_SRPUSERNAME,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRPUSERNAME_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srpusername */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SRPUSERNAME_DESC, SRPUSERNAME_NAME, SRPUSERNAME_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 28, VALUE_OPT_SRPPASSWD,
     /* equiv idx, value */ 28, VALUE_OPT_SRPPASSWD,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRPPASSWD_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srppasswd */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SRPPASSWD_DESC, SRPPASSWD_NAME, SRPPASSWD_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 29, VALUE_OPT_PSKUSERNAME,
     /* equiv idx, value */ 29, VALUE_OPT_PSKUSERNAME,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PSKUSERNAME_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pskusername */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PSKUSERNAME_DESC, PSKUSERNAME_NAME, PSKUSERNAME_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 30, VALUE_OPT_PSKKEY,
     /* equiv idx, value */ 30, VALUE_OPT_PSKKEY,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PSKKEY_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --pskkey */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PSKKEY_DESC, PSKKEY_NAME, PSKKEY_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 31, VALUE_OPT_PORT,
     /* equiv idx, value */ 31, VALUE_OPT_PORT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PORT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --port */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ PORT_DESC, PORT_NAME, PORT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 32, VALUE_OPT_INSECURE,
     /* equiv idx, value */ 32, VALUE_OPT_INSECURE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ INSECURE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --insecure */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ INSECURE_DESC, INSECURE_NAME, INSECURE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 33, VALUE_OPT_RANGES,
     /* equiv idx, value */ 33, VALUE_OPT_RANGES,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ RANGES_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --ranges */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ RANGES_DESC, RANGES_NAME, RANGES_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 34, VALUE_OPT_BENCHMARK_CIPHERS,
     /* equiv idx, value */ 34, VALUE_OPT_BENCHMARK_CIPHERS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ BENCHMARK_CIPHERS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --benchmark-ciphers */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ BENCHMARK_CIPHERS_DESC, BENCHMARK_CIPHERS_NAME, BENCHMARK_CIPHERS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 35, VALUE_OPT_BENCHMARK_TLS_KX,
     /* equiv idx, value */ 35, VALUE_OPT_BENCHMARK_TLS_KX,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ BENCHMARK_TLS_KX_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --benchmark-tls-kx */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ BENCHMARK_TLS_KX_DESC, BENCHMARK_TLS_KX_NAME, BENCHMARK_TLS_KX_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 36, VALUE_OPT_BENCHMARK_TLS_CIPHERS,
     /* equiv idx, value */ 36, VALUE_OPT_BENCHMARK_TLS_CIPHERS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ BENCHMARK_TLS_CIPHERS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --benchmark-tls-ciphers */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ BENCHMARK_TLS_CIPHERS_DESC, BENCHMARK_TLS_CIPHERS_NAME, BENCHMARK_TLS_CIPHERS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 37, VALUE_OPT_LIST,
     /* equiv idx, value */ 37, VALUE_OPT_LIST,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ LIST_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --list */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ LIST_DESC, LIST_NAME, LIST_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 38, VALUE_OPT_NOTICKET,
     /* equiv idx, value */ 38, VALUE_OPT_NOTICKET,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ NOTICKET_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --noticket */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ NOTICKET_DESC, NOTICKET_NAME, NOTICKET_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 39, VALUE_OPT_SRTP_PROFILES,
     /* equiv idx, value */ 39, VALUE_OPT_SRTP_PROFILES,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ SRTP_PROFILES_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --srtp_profiles */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ SRTP_PROFILES_DESC, SRTP_PROFILES_NAME, SRTP_PROFILES_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 40, VALUE_OPT_ALPN,
     /* equiv idx, value */ 40, VALUE_OPT_ALPN,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, NOLIMIT, 0,
     /* opt state flags  */ ALPN_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --alpn */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ optionStackArg,
     /* desc, NAME, name */ ALPN_DESC, ALPN_NAME, ALPN_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 41, VALUE_OPT_HEARTBEAT,
     /* equiv idx, value */ 41, VALUE_OPT_HEARTBEAT,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ HEARTBEAT_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --heartbeat */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ HEARTBEAT_DESC, HEARTBEAT_NAME, HEARTBEAT_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 42, VALUE_OPT_RECORDSIZE,
     /* equiv idx, value */ 42, VALUE_OPT_RECORDSIZE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ RECORDSIZE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --recordsize */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptRecordsize,
     /* desc, NAME, name */ RECORDSIZE_DESC, RECORDSIZE_NAME, RECORDSIZE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 43, VALUE_OPT_DISABLE_SNI,
     /* equiv idx, value */ 43, VALUE_OPT_DISABLE_SNI,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DISABLE_SNI_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --disable-sni */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ DISABLE_SNI_DESC, DISABLE_SNI_NAME, DISABLE_SNI_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 44, VALUE_OPT_DISABLE_EXTENSIONS,
     /* equiv idx, value */ 44, VALUE_OPT_DISABLE_EXTENSIONS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ DISABLE_EXTENSIONS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --disable-extensions */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ DISABLE_EXTENSIONS_DESC, DISABLE_EXTENSIONS_NAME, DISABLE_EXTENSIONS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 45, VALUE_OPT_INLINE_COMMANDS,
     /* equiv idx, value */ 45, VALUE_OPT_INLINE_COMMANDS,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ INLINE_COMMANDS_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --inline-commands */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ INLINE_COMMANDS_DESC, INLINE_COMMANDS_NAME, INLINE_COMMANDS_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 46, VALUE_OPT_INLINE_COMMANDS_PREFIX,
     /* equiv idx, value */ 46, VALUE_OPT_INLINE_COMMANDS_PREFIX,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ INLINE_COMMANDS_PREFIX_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --inline-commands-prefix */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ INLINE_COMMANDS_PREFIX_DESC, INLINE_COMMANDS_PREFIX_NAME, INLINE_COMMANDS_PREFIX_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 47, VALUE_OPT_PROVIDER,
     /* equiv idx, value */ 47, VALUE_OPT_PROVIDER,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ PROVIDER_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --provider */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doOptProvider,
     /* desc, NAME, name */ PROVIDER_DESC, PROVIDER_NAME, PROVIDER_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ 48, VALUE_OPT_FIPS140_MODE,
     /* equiv idx, value */ 48, VALUE_OPT_FIPS140_MODE,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ FIPS140_MODE_FLAGS, 0,
     /* last opt argumnt */ { NULL }, /* --fips140-mode */
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ NULL,
     /* desc, NAME, name */ FIPS140_MODE_DESC, FIPS140_MODE_NAME, FIPS140_MODE_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ INDEX_OPT_VERSION, VALUE_OPT_VERSION,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_VERSION,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ VER_FLAGS, AOUSE_VERSION,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ VER_PROC,
     /* desc, NAME, name */ VER_DESC, NULL, VER_name,
     /* disablement strs */ NULL, NULL },



  {  /* entry idx, value */ INDEX_OPT_HELP, VALUE_OPT_HELP,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_HELP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ OPTST_IMM | OPTST_NO_INIT, AOUSE_HELP,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL, NULL,
     /* option proc      */ doUsageOpt,
     /* desc, NAME, name */ HELP_DESC, NULL, HELP_name,
     /* disablement strs */ NULL, NULL },

  {  /* entry idx, value */ INDEX_OPT_MORE_HELP, VALUE_OPT_MORE_HELP,
     /* equiv idx value  */ NO_EQUIVALENT, VALUE_OPT_MORE_HELP,
     /* equivalenced to  */ NO_EQUIVALENT,
     /* min, max, act ct */ 0, 1, 0,
     /* opt state flags  */ MORE_HELP_FLAGS, AOUSE_MORE_HELP,
     /* last opt argumnt */ { NULL },
     /* arg list/cookie  */ NULL,
     /* must/cannot opts */ NULL,  NULL,
     /* option proc      */ optionPagedUsage,
     /* desc, NAME, name */ MORE_HELP_DESC, NULL, MORE_HELP_name,
     /* disablement strs */ NULL, NULL }
};


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/** Reference to the upper cased version of gnutls-cli. */
#define zPROGNAME       (gnutls_cli_opt_strs+3879)
/** Reference to the title line for gnutls-cli usage. */
#define zUsageTitle     (gnutls_cli_opt_strs+3890)
/** There is no gnutls-cli configuration file. */
#define zRcName         NULL
/** There are no directories to search for gnutls-cli config files. */
#define apzHomeList     NULL
/** The gnutls-cli program bug email address. */
#define zBugsAddr       (gnutls_cli_opt_strs+3986)
/** Clarification/explanation of what gnutls-cli does. */
#define zExplain        (gnutls_cli_opt_strs+4002)
/** Extra detail explaining what gnutls-cli does. */
#define zDetail         (gnutls_cli_opt_strs+4004)
/** The full version string for gnutls-cli. */
#define zFullVersion    (gnutls_cli_opt_strs+4187)
/* extracted from optcode.tlib near line 364 */

#if defined(ENABLE_NLS)
# define OPTPROC_BASE OPTPROC_TRANSLATE | OPTPROC_NXLAT_OPT
  static tOptionXlateProc translate_option_strings;
#else
# define OPTPROC_BASE OPTPROC_NONE
# define translate_option_strings NULL
#endif /* ENABLE_NLS */

#define gnutls_cli_full_usage (NULL)
#define gnutls_cli_short_usage (gnutls_cli_opt_strs+4204)

#endif /* not defined __doxygen__ */

/*
 *  Create the static procedure(s) declared above.
 */
/**
 * The callout function that invokes the optionUsage function.
 *
 * @param[in] opts the AutoOpts option description structure
 * @param[in] od   the descriptor for the "help" (usage) option.
 * @noreturn
 */
static void
doUsageOpt(tOptions * opts, tOptDesc * od)
{
    int ex_code;
    ex_code = GNUTLS_CLI_EXIT_SUCCESS;
    optionUsage(&gnutls_cliOptions, ex_code);
    /* NOTREACHED */
    exit(1);
    (void)opts;
    (void)od;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the debug option.
 * Specifies the debug level.
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptDebug(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static struct {long rmin, rmax;} const rng[1] = {
        { 0 ,  9999 } };
    int  ix;

    if (pOptions <= OPTPROC_EMIT_LIMIT)
        goto emit_ranges;
    optionNumericVal(pOptions, pOptDesc);

    for (ix = 0; ix < 1; ix++) {
        if (pOptDesc->optArg.argInt < rng[ix].rmin)
            continue;  /* ranges need not be ordered. */
        if (pOptDesc->optArg.argInt == rng[ix].rmin)
            return;
        if (rng[ix].rmax == LONG_MIN)
            continue;
        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
            return;
    }

    option_usage_fp = stderr;

 emit_ranges:
    optionShowRange(pOptions, pOptDesc, (void *)rng, 1);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the mtu option.
 *
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptMtu(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static struct {long rmin, rmax;} const rng[1] = {
        { 0, 17000 } };
    int  ix;

    if (pOptions <= OPTPROC_EMIT_LIMIT)
        goto emit_ranges;
    optionNumericVal(pOptions, pOptDesc);

    for (ix = 0; ix < 1; ix++) {
        if (pOptDesc->optArg.argInt < rng[ix].rmin)
            continue;  /* ranges need not be ordered. */
        if (pOptDesc->optArg.argInt == rng[ix].rmin)
            return;
        if (rng[ix].rmax == LONG_MIN)
            continue;
        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
            return;
    }

    option_usage_fp = stderr;

 emit_ranges:
    optionShowRange(pOptions, pOptDesc, (void *)rng, 1);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the x509crlfile option.
 *
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptX509crlfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pgpkeyfile option.
 *
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPgpkeyfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pgpkeyring option.
 *
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPgpkeyring(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the pgpcertfile option.
 *
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptPgpcertfile(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the recordsize option.
 *
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptRecordsize(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static struct {long rmin, rmax;} const rng[1] = {
        { 0, 4096 } };
    int  ix;

    if (pOptions <= OPTPROC_EMIT_LIMIT)
        goto emit_ranges;
    optionNumericVal(pOptions, pOptDesc);

    for (ix = 0; ix < 1; ix++) {
        if (pOptDesc->optArg.argInt < rng[ix].rmin)
            continue;  /* ranges need not be ordered. */
        if (pOptDesc->optArg.argInt == rng[ix].rmin)
            return;
        if (rng[ix].rmax == LONG_MIN)
            continue;
        if (pOptDesc->optArg.argInt <= rng[ix].rmax)
            return;
    }

    option_usage_fp = stderr;

 emit_ranges:
    optionShowRange(pOptions, pOptDesc, (void *)rng, 1);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/**
 * Code to handle the provider option.
 * This will override the default options in /etc/gnutls/pkcs11.conf
 * @param[in] pOptions the gnutls-cli options data structure
 * @param[in,out] pOptDesc the option descriptor for this option.
 */
static void
doOptProvider(tOptions* pOptions, tOptDesc* pOptDesc)
{
    static teOptFileType const  type =
        FTYPE_MODE_MUST_EXIST + FTYPE_MODE_NO_OPEN;
    static tuFileMode           mode;
#ifndef O_CLOEXEC
#  define O_CLOEXEC 0
#endif
    mode.file_flags = O_CLOEXEC;

    /*
     * This function handles special invalid values for "pOptions"
     */
    optionFileCheck(pOptions, pOptDesc, type, mode);
}
/* extracted from optmain.tlib near line 1245 */

/**
 * The directory containing the data associated with gnutls-cli.
 */
#ifndef  PKGDATADIR
# define PKGDATADIR ""
#endif

/**
 * Information about the person or institution that packaged gnutls-cli
 * for the current distribution.
 */
#ifndef  WITH_PACKAGER
# define gnutls_cli_packager_info NULL
#else
/** Packager information for gnutls-cli. */
static char const gnutls_cli_packager_info[] =
    "Packaged by " WITH_PACKAGER

# ifdef WITH_PACKAGER_VERSION
        " ("WITH_PACKAGER_VERSION")"
# endif

# ifdef WITH_PACKAGER_BUG_REPORTS
    "\nReport gnutls_cli bugs to " WITH_PACKAGER_BUG_REPORTS
# endif
    "\n";
#endif
#ifndef __doxygen__

#endif /* __doxygen__ */
/**
 * The option definitions for gnutls-cli.  The one structure that
 * binds them all.
 */
tOptions gnutls_cliOptions = {
    OPTIONS_STRUCT_VERSION,
    0, NULL,                    /* original argc + argv    */
    ( OPTPROC_BASE
    + OPTPROC_ERRSTOP
    + OPTPROC_SHORTOPT
    + OPTPROC_LONGOPT
    + OPTPROC_NO_REQ_OPT
    + OPTPROC_NEGATIONS
    + OPTPROC_REORDER
    + OPTPROC_GNUUSAGE
    + OPTPROC_MISUSE ),
    0, NULL,                    /* current option index, current option */
    NULL,         NULL,         zPROGNAME,
    zRcName,      zCopyright,   zLicenseDescrip,
    zFullVersion, apzHomeList,  zUsageTitle,
    zExplain,     zDetail,      optDesc,
    zBugsAddr,                  /* address to send bugs to */
    NULL, NULL,                 /* extensions/saved state  */
    optionUsage, /* usage procedure */
    translate_option_strings,   /* translation procedure */
    /*
     *  Indexes to special options
     */
    { INDEX_OPT_MORE_HELP, /* more-help option index */
      NO_EQUIVALENT, /* save option index */
      NO_EQUIVALENT, /* '-#' option index */
      NO_EQUIVALENT /* index of default opt */
    },
    52 /* full option count */, 49 /* user option count */,
    gnutls_cli_full_usage, gnutls_cli_short_usage,
    NULL, NULL,
    PKGDATADIR, gnutls_cli_packager_info
};

#if ENABLE_NLS
/**
 * This code is designed to translate translatable option text for the
 * gnutls-cli program.  These translations happen upon entry
 * to optionProcess().
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifdef HAVE_DCGETTEXT
# include <gettext.h>
#endif
#include <autoopts/usage-txt.h>

static char * AO_gettext(char const * pz);
static void   coerce_it(void ** s);

/**
 * AutoGen specific wrapper function for gettext.  It relies on the macro _()
 * to convert from English to the target language, then strdup-duplicates the
 * result string.  It tries the "libopts" domain first, then whatever has been
 * set via the \a textdomain(3) call.
 *
 * @param[in] pz the input text used as a lookup key.
 * @returns the translated text (if there is one),
 *   or the original text (if not).
 */
static char *
AO_gettext(char const * pz)
{
    char * res;
    if (pz == NULL)
        return NULL;
#ifdef HAVE_DCGETTEXT
    /*
     * While processing the option_xlateable_txt data, try to use the
     * "libopts" domain.  Once we switch to the option descriptor data,
     * do *not* use that domain.
     */
    if (option_xlateable_txt.field_ct != 0) {
        res = dgettext("libopts", pz);
        if (res == pz)
            res = (char *)(void *)_(pz);
    } else
        res = (char *)(void *)_(pz);
#else
    res = (char *)(void *)_(pz);
#endif
    if (res == pz)
        return res;
    res = strdup(res);
    if (res == NULL) {
        fputs(_("No memory for duping translated strings\n"), stderr);
        exit(GNUTLS_CLI_EXIT_FAILURE);
    }
    return res;
}

/**
 * All the pointers we use are marked "* const", but they are stored in
 * writable memory.  Coerce the mutability and set the pointer.
 */
static void coerce_it(void ** s) { *s = AO_gettext(*s);
}

/**
 * Translate all the translatable strings in the gnutls_cliOptions
 * structure defined above.  This is done only once.
 */
static void
translate_option_strings(void)
{
    tOptions * const opts = &gnutls_cliOptions;

    /*
     *  Guard against re-translation.  It won't work.  The strings will have
     *  been changed by the first pass through this code.  One shot only.
     */
    if (option_xlateable_txt.field_ct != 0) {
        /*
         *  Do the translations.  The first pointer follows the field count
         *  field.  The field count field is the size of a pointer.
         */
        char ** ppz = (char**)(void*)&(option_xlateable_txt);
        int     ix  = option_xlateable_txt.field_ct;

        do {
            ppz++; /* skip over field_ct */
            *ppz = AO_gettext(*ppz);
        } while (--ix > 0);
        /* prevent re-translation and disable "libopts" domain lookup */
        option_xlateable_txt.field_ct = 0;

        coerce_it((void*)&(opts->pzCopyright));
        coerce_it((void*)&(opts->pzCopyNotice));
        coerce_it((void*)&(opts->pzFullVersion));
        coerce_it((void*)&(opts->pzUsageTitle));
        coerce_it((void*)&(opts->pzExplain));
        coerce_it((void*)&(opts->pzDetail));
        {
            tOptDesc * od = opts->pOptDesc;
            for (ix = opts->optCt; ix > 0; ix--, od++)
                coerce_it((void*)&(od->pzText));
        }
    }
}
#endif /* ENABLE_NLS */

#ifdef DO_NOT_COMPILE_THIS_CODE_IT_IS_FOR_GETTEXT
/** I18N function strictly for xgettext.  Do not compile. */
static void bogus_function(void) {
  /* TRANSLATORS:

     The following dummy function was crated solely so that xgettext can
     extract the correct strings.  These strings are actually referenced
     by a field name in the gnutls_cliOptions structure noted in the
     comments below.  The literal text is defined in gnutls_cli_opt_strs.
   
     NOTE: the strings below are segmented with respect to the source string
     gnutls_cli_opt_strs.  The strings above are handed off for translation
     at run time a paragraph at a time.  Consequently, they are presented here
     for translation a paragraph at a time.
   
     ALSO: often the description for an option will reference another option
     by name.  These are set off with apostrophe quotes (I hope).  Do not
     translate option names.
   */
  /* referenced via gnutls_cliOptions.pzCopyright */
  puts(_("gnutls-cli 3.3.9\n\
Copyright (C) 2000-2014 Free Software Foundation, and others, all rights reserved.\n\
This is free software. It is licensed for use, modification and\n\
redistribution under the terms of the GNU General Public License,\n\
version 3 or later <http://gnu.org/licenses/gpl.html>\n"));

  /* referenced via gnutls_cliOptions.pzCopyNotice */
  puts(_("gnutls-cli is free software: you can redistribute it and/or modify it under\n\
the terms of the GNU General Public License as published by the Free\n\
Software Foundation, either version 3 of the License, or (at your option)\n\
any later version.\n\n"));
  puts(_("gnutls-cli is distributed in the hope that it will be useful, but WITHOUT\n\
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n\
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n\
more details.\n\n"));
  puts(_("You should have received a copy of the GNU General Public License along\n\
with this program.  If not, see <http://www.gnu.org/licenses/>.\n"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Enable debugging"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("More verbose output"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Enable trust on first use authentication"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Fail to connect if a known certificate has changed"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Enable DANE certificate verification (DNSSEC)"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Use the local DNS server for DNSSEC resolving"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Disable CA certificate verification"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Enable OCSP certificate verification"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Establish a session and resume"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Establish a session and rehandshake"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Connect, establish a plain session and start TLS"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Use DTLS (datagram TLS) over UDP"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Set MTU for datagram TLS"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Send CR LF instead of LF"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Use DER format for certificates to read from"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Send the openpgp fingerprint, instead of the key"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Print peer's certificate in PEM format"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("The minimum number of bits allowed for DH"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Priorities string"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Certificate file or PKCS #11 URL to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("CRL file to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("PGP Key file to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("PGP Key ring file to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("PGP Public Key (certificate) file to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("X.509 key file or PKCS #11 URL to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("X.509 Certificate file or PKCS #11 URL to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("PGP subkey to use (hex or auto)"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("SRP username to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("SRP password to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("PSK username to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("PSK key (in hex) to use"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("The port or service to connect to"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Don't abort program if server certificate can't be validated"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Use length-hiding padding to prevent traffic analysis"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Benchmark individual ciphers"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Benchmark TLS key exchange methods"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Benchmark TLS ciphers"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Print a list of the supported algorithms and modes"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Don't allow session tickets"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Offer SRTP profiles"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Application layer protocol"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Activate heartbeat support"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("The maximum record size to advertize"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Do not send a Server Name Indication (SNI)"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Disable all the TLS extensions"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Inline commands of the form ^<cmd>^"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Change the default (^) used as a delimiter for inline commands.  The\n\
value is a single US-ASCII character (octets 0 - 127)."));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Specify the PKCS #11 provider library"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("Reports the status of the FIPS140-2 mode in gnutls library"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("display extended usage information and exit"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("extended usage information passed thru pager"));

  /* referenced via gnutls_cliOptions.pOptDesc->pzText */
  puts(_("output version information and exit"));

  /* referenced via gnutls_cliOptions.pzUsageTitle */
  puts(_("gnutls-cli - GnuTLS client\n\
Usage:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]... [hostname]\n"));

  /* referenced via gnutls_cliOptions.pzExplain */
  puts(_("\n"));

  /* referenced via gnutls_cliOptions.pzDetail */
  puts(_("Simple client program to set up a TLS connection to some other computer.  It\n\
sets up a TLS connection and forwards data from the standard input to the\n\
secured socket and vice versa.\n"));

  /* referenced via gnutls_cliOptions.pzFullVersion */
  puts(_("gnutls-cli 3.3.9"));

  /* referenced via gnutls_cliOptions.pzFullUsage */
  puts(_("<<<NOT-FOUND>>>"));

  /* referenced via gnutls_cliOptions.pzShortUsage */
  puts(_("Usage: gnutls-cli [options] hostname\n\
gnutls-cli --help for usage instructions.\n"));
  /* LIBOPTS-MESSAGES: */
#line 67 "../autoopts.c"
  puts(_("allocation of %d bytes failed\n"));
#line 93 "../autoopts.c"
  puts(_("allocation of %d bytes failed\n"));
#line 53 "../init.c"
  puts(_("AutoOpts function called without option descriptor\n"));
#line 90 "../init.c"
  puts(_("\tThis exceeds the compiled library version:  "));
#line 88 "../init.c"
  puts(_("Automated Options Processing Error!\n"
       "\t%s called AutoOpts function with structure version %d:%d:%d.\n"));
#line 80 "../autoopts.c"
  puts(_("realloc of %d bytes at 0x%p failed\n"));
#line 92 "../init.c"
  puts(_("\tThis is less than the minimum library version:  "));
#line 121 "../version.c"
  puts(_("Automated Options version %s\n"
       "\tCopyright (C) 1999-2014 by Bruce Korb - all rights reserved\n"));
#line 82 "../makeshell.c"
  puts(_("(AutoOpts bug):  %s.\n"));
#line 90 "../reset.c"
  puts(_("optionResetOpt() called, but reset-option not configured"));
#line 292 "../usage.c"
  puts(_("could not locate the 'help' option"));
#line 336 "../autoopts.c"
  puts(_("optionProcess() was called with invalid data"));
#line 748 "../usage.c"
  puts(_("invalid argument type specified"));
#line 598 "../find.c"
  puts(_("defaulted to option with optional arg"));
#line 76 "../alias.c"
  puts(_("aliasing option is out of range."));
#line 234 "../enum.c"
  puts(_("%s error:  the keyword '%s' is ambiguous for %s\n"));
#line 108 "../find.c"
  puts(_("  The following options match:\n"));
#line 293 "../find.c"
  puts(_("%s: ambiguous option name: %s (matches %d options)\n"));
#line 161 "../check.c"
  puts(_("%s: Command line arguments required\n"));
#line 43 "../alias.c"
  puts(_("%d %s%s options allowed\n"));
#line 89 "../makeshell.c"
  puts(_("%s error %d (%s) calling %s for '%s'\n"));
#line 301 "../makeshell.c"
  puts(_("interprocess pipe"));
#line 168 "../version.c"
  puts(_("error: version option argument '%c' invalid.  Use:\n"
       "\t'v' - version only\n"
       "\t'c' - version and copyright\n"
       "\t'n' - version and full copyright notice\n"));
#line 58 "../check.c"
  puts(_("%s error:  the '%s' and '%s' options conflict\n"));
#line 217 "../find.c"
  puts(_("%s: The '%s' option has been disabled."));
#line 430 "../find.c"
  puts(_("%s: The '%s' option has been disabled."));
#line 38 "../alias.c"
  puts(_("-equivalence"));
#line 469 "../find.c"
  puts(_("%s: illegal option -- %c\n"));
#line 110 "../reset.c"
  puts(_("%s: illegal option -- %c\n"));
#line 271 "../find.c"
  puts(_("%s: illegal option -- %s\n"));
#line 755 "../find.c"
  puts(_("%s: illegal option -- %s\n"));
#line 118 "../reset.c"
  puts(_("%s: illegal option -- %s\n"));
#line 335 "../find.c"
  puts(_("%s: unknown vendor extension option -- %s\n"));
#line 159 "../enum.c"
  puts(_("  or an integer from %d through %d\n"));
#line 169 "../enum.c"
  puts(_("  or an integer from %d through %d\n"));
#line 747 "../usage.c"
  puts(_("%s error:  invalid option descriptor for %s\n"));
#line 1081 "../usage.c"
  puts(_("%s error:  invalid option descriptor for %s\n"));
#line 385 "../find.c"
  puts(_("%s: invalid option name: %s\n"));
#line 527 "../find.c"
  puts(_("%s: The '%s' option requires an argument.\n"));
#line 156 "../autoopts.c"
  puts(_("(AutoOpts bug):  Equivalenced option '%s' was equivalenced to both\n"
       "\t'%s' and '%s'."));
#line 94 "../check.c"
  puts(_("%s error:  The %s option is required\n"));
#line 632 "../find.c"
  puts(_("%s: The '%s' option cannot have an argument.\n"));
#line 151 "../check.c"
  puts(_("%s: Command line arguments are not allowed.\n"));
#line 535 "../save.c"
  puts(_("error %d (%s) creating %s\n"));
#line 234 "../enum.c"
  puts(_("%s error:  '%s' does not match any %s keywords.\n"));
#line 93 "../reset.c"
  puts(_("%s error: The '%s' option requires an argument.\n"));
#line 184 "../save.c"
  puts(_("error %d (%s) stat-ing %s\n"));
#line 238 "../save.c"
  puts(_("error %d (%s) stat-ing %s\n"));
#line 143 "../restore.c"
  puts(_("%s error: no saved option state\n"));
#line 231 "../autoopts.c"
  puts(_("'%s' is not a command line option.\n"));
#line 111 "../time.c"
  puts(_("%s error:  '%s' is not a recognizable date/time.\n"));
#line 132 "../save.c"
  puts(_("'%s' not defined\n"));
#line 50 "../time.c"
  puts(_("%s error:  '%s' is not a recognizable time duration.\n"));
#line 92 "../check.c"
  puts(_("%s error:  The %s option must appear %d times.\n"));
#line 164 "../numeric.c"
  puts(_("%s error:  '%s' is not a recognizable number.\n"));
#line 200 "../enum.c"
  puts(_("%s error:  %s exceeds %s keyword count\n"));
#line 330 "../usage.c"
  puts(_("Try '%s %s' for more information.\n"));
#line 45 "../alias.c"
  puts(_("one %s%s option allowed\n"));
#line 203 "../makeshell.c"
  puts(_("standard output"));
#line 938 "../makeshell.c"
  puts(_("standard output"));
#line 274 "../usage.c"
  puts(_("standard output"));
#line 415 "../usage.c"
  puts(_("standard output"));
#line 625 "../usage.c"
  puts(_("standard output"));
#line 175 "../version.c"
  puts(_("standard output"));
#line 274 "../usage.c"
  puts(_("standard error"));
#line 415 "../usage.c"
  puts(_("standard error"));
#line 625 "../usage.c"
  puts(_("standard error"));
#line 175 "../version.c"
  puts(_("standard error"));
#line 203 "../makeshell.c"
  puts(_("write"));
#line 938 "../makeshell.c"
  puts(_("write"));
#line 273 "../usage.c"
  puts(_("write"));
#line 414 "../usage.c"
  puts(_("write"));
#line 624 "../usage.c"
  puts(_("write"));
#line 174 "../version.c"
  puts(_("write"));
#line 60 "../numeric.c"
  puts(_("%s error:  %s option value %ld is out of range.\n"));
#line 44 "../check.c"
  puts(_("%s error:  %s option requires the %s option\n"));
#line 131 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 183 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 237 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 256 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
#line 534 "../save.c"
  puts(_("%s warning:  cannot save options - %s not regular file\n"));
  /* END-LIBOPTS-MESSAGES */

  /* USAGE-TEXT: */
#line 873 "../usage.c"
  puts(_("\t\t\t\t- an alternate for '%s'\n"));
#line 1148 "../usage.c"
  puts(_("Version, usage and configuration options:"));
#line 924 "../usage.c"
  puts(_("\t\t\t\t- default option for unnamed options\n"));
#line 837 "../usage.c"
  puts(_("\t\t\t\t- disabled as '--%s'\n"));
#line 1117 "../usage.c"
  puts(_(" --- %-14s %s\n"));
#line 1115 "../usage.c"
  puts(_("This option has been disabled"));
#line 864 "../usage.c"
  puts(_("\t\t\t\t- enabled by default\n"));
#line 40 "../alias.c"
  puts(_("%s error:  only "));
#line 1194 "../usage.c"
  puts(_(" - examining environment variables named %s_*\n"));
#line 168 "../file.c"
  puts(_("\t\t\t\t- file must not pre-exist\n"));
#line 172 "../file.c"
  puts(_("\t\t\t\t- file must pre-exist\n"));
#line 380 "../usage.c"
  puts(_("Options are specified by doubled hyphens and their name or by a single\n"
       "hyphen and the flag character.\n"));
#line 916 "../makeshell.c"
  puts(_("\n"
       "= = = = = = = =\n\n"
       "This incarnation of genshell will produce\n"
       "a shell script to parse the options for %s:\n\n"));
#line 166 "../enum.c"
  puts(_("  or an integer mask with any of the lower %d bits set\n"));
#line 897 "../usage.c"
  puts(_("\t\t\t\t- is a set membership option\n"));
#line 918 "../usage.c"
  puts(_("\t\t\t\t- must appear between %d and %d times\n"));
#line 382 "../usage.c"
  puts(_("Options are specified by single or double hyphens and their name.\n"));
#line 904 "../usage.c"
  puts(_("\t\t\t\t- may appear multiple times\n"));
#line 891 "../usage.c"
  puts(_("\t\t\t\t- may not be preset\n"));
#line 1309 "../usage.c"
  puts(_("   Arg Option-Name    Description\n"));
#line 1245 "../usage.c"
  puts(_("  Flg Arg Option-Name    Description\n"));
#line 1303 "../usage.c"
  puts(_("  Flg Arg Option-Name    Description\n"));
#line 1304 "../usage.c"
  puts(_(" %3s %s"));
#line 1310 "../usage.c"
  puts(_(" %3s %s"));
#line 387 "../usage.c"
  puts(_("The '-#<number>' option may omit the hash char\n"));
#line 383 "../usage.c"
  puts(_("All arguments are named options.\n"));
#line 971 "../usage.c"
  puts(_(" - reading file %s"));
#line 409 "../usage.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 100 "../version.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 129 "../version.c"
  puts(_("\n"
       "Please send bug reports to:  <%s>\n"));
#line 903 "../usage.c"
  puts(_("\t\t\t\t- may NOT appear - preset only\n"));
#line 944 "../usage.c"
  puts(_("\n"
       "The following option preset mechanisms are supported:\n"));
#line 1192 "../usage.c"
  puts(_("\n"
       "The following option preset mechanisms are supported:\n"));
#line 682 "../usage.c"
  puts(_("prohibits these options:\n"));
#line 677 "../usage.c"
  puts(_("prohibits the option '%s'\n"));
#line 81 "../numeric.c"
  puts(_("%s%ld to %ld"));
#line 79 "../numeric.c"
  puts(_("%sgreater than or equal to %ld"));
#line 75 "../numeric.c"
  puts(_("%s%ld exactly"));
#line 68 "../numeric.c"
  puts(_("%sit must lie in one of the ranges:\n"));
#line 68 "../numeric.c"
  puts(_("%sit must be in the range:\n"));
#line 88 "../numeric.c"
  puts(_(", or\n"));
#line 66 "../numeric.c"
  puts(_("%sis scalable with a suffix: k/K/m/M/g/G/t/T\n"));
#line 77 "../numeric.c"
  puts(_("%sless than or equal to %ld"));
#line 390 "../usage.c"
  puts(_("Operands and options may be intermixed.  They will be reordered.\n"));
#line 652 "../usage.c"
  puts(_("requires the option '%s'\n"));
#line 655 "../usage.c"
  puts(_("requires these options:\n"));
#line 1321 "../usage.c"
  puts(_("   Arg Option-Name   Req?  Description\n"));
#line 1315 "../usage.c"
  puts(_("  Flg Arg Option-Name   Req?  Description\n"));
#line 167 "../enum.c"
  puts(_("or you may use a numeric representation.  Preceding these with a '!'\n"
       "will clear the bits, specifying 'none' will clear all bits, and 'all'\n"
       "will set them all.  Multiple entries may be passed as an option\n"
       "argument list.\n"));
#line 910 "../usage.c"
  puts(_("\t\t\t\t- may appear up to %d times\n"));
#line 77 "../enum.c"
  puts(_("The valid \"%s\" option keywords are:\n"));
#line 1152 "../usage.c"
  puts(_("The next option supports vendor supported extra options:"));
#line 773 "../usage.c"
  puts(_("These additional options are:"));
  /* END-USAGE-TEXT */
}
#endif /* uncompilable code */
#ifdef  __cplusplus
}
#endif
/* cli-args.c ends here */
